/**
 * Resolves/rejects the promise in one single line
 * @param { Promise } Promise
 * @returns { Promise } Promise that resolves with [ error, data ]
 */
export const here = promise =>
  promise.then(data => [null, data]).catch(err => [err, undefined]);

/**
 * Seperates out provided job from main thread as Promise and resolves in necessary array pattern.
 * @param {Function} jobToPromisify Heavy thread blocking job to seperate out.
 * @param {Function} isCatch A confirmation method to match expectedness of result generated by job.
 * @returns { Promise } here-fied Promise that resolves with [ error, jobResult ]
 */
export const job = (jobToPromisify, isCatch, ...additionalJobArgs) =>
  here(
    new Promise((resolve, reject) => {
      const result = jobToPromisify(...additionalJobArgs);
      isCatch && isCatch(result)
        ? reject(result)
        : resolve(result);
    })
  );

/**
 * @param {Promise} promise Actual promise to transform
 * @param  {Functions} transformations List of transform function to pipe promise result through.
 * @returns { Promise } here-fied Promise that resolves with [ error, resultAfterTransformations ]
 */
export const chain = (promise, ...transformations) => {
  const promiseChain = transformations.reduce((chain, transformer) => {
    return chain.then(data => Promise.resolve(transformer(data)));
  }, promise);
  return here(promiseChain);
};

export default here;
